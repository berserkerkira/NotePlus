FileNameStringSplitter::FileNameStringSplitter(const TCHAR *fileNameStr)   {
		//if (!fileNameStr) return;
		TCHAR *pStr = NULL;
		bool isInsideQuotes = false;
		const int filePathLength = MAX_PATH;

		TCHAR str[filePathLength];
		int i = 0;
        bool fini = false;
		for (pStr = (TCHAR *)fileNameStr ; !fini ; )
		{
			if (i >= filePathLength)
				break;

			switch (*pStr)
			{
				case '"' :
					if (isInsideQuotes)
					{
						str[i] = '\0';
                        if (str[0])
							_fileNames.push_back(generic_string(str));
						i = 0;
					}
					isInsideQuotes = !isInsideQuotes;
					pStr++;
					break;
				
				case ' ' :
					if (isInsideQuotes)
					{
						str[i] = *pStr;
						i++; 
					}
					else
					{
						str[i] = '\0';
                        if (str[0])
							_fileNames.push_back(generic_string(str));
						i = 0;
					}
                    pStr++;
					break;
					
                case '\0' :
                    str[i] = *pStr;
                    if (str[0])
						_fileNames.push_back(generic_string(str));
                    fini = true;
					break;

				default :
					str[i] = *pStr;
					i++; pStr++;
					break;
			}
		}
	};

FileNameStringSplitter::getFileName(int index) const  {
		return _fileNames[index].c_str();
	};

int FileNameStringSplitter::size() const  {
		return int(_fileNames.size());
	};

FileNameStringSplitter::FileNameStringSplitter(const TCHAR *fileNameStr)   {		//if (!fileNameStr) return;
		TCHAR *pStr = NULL;
		bool isInsideQuotes = false;
		const int filePathLength = MAX_PATH;

		TCHAR str[filePathLength];
		int i = 0;
        bool fini = false;
		for (pStr = (TCHAR *)fileNameStr ; !fini ; )
		{
			if (i >= filePathLength)
				break;

			switch (*pStr)
			{
				case '"' :
					if (isInsideQuotes)
					{
						str[i] = '\0';
                        if (str[0])
							_fileNames.push_back(generic_string(str));
						i = 0;
					}
					isInsideQuotes = !isInsideQuotes;
					pStr++;
					break;
				
				case ' ' :
					if (isInsideQuotes)
					{
						str[i] = *pStr;
						i++; 
					}
					else
					{
						str[i] = '\0';
                        if (str[0])
							_fileNames.push_back(generic_string(str));
						i = 0;
					}
                    pStr++;
					break;
					
                case '\0' :
                    str[i] = *pStr;
                    if (str[0])
						_fileNames.push_back(generic_string(str));
                    fini = true;
					break;

				default :
					str[i] = *pStr;
					i++; pStr++;
					break;
			}
		}
	};

FileNameStringSplitter::getFileName(int index) const  {		return _fileNames[index].c_str();
	};

int FileNameStringSplitter::size() const  {		return int(_fileNames.size());
	};

FileNameStringSplitter::FileNameStringSplitter(const TCHAR *fileNameStr)   {		//if (!fileNameStr) return;
		TCHAR *pStr = NULL;
		bool isInsideQuotes = false;
		const int filePathLength = MAX_PATH;

		TCHAR str[filePathLength];
		int i = 0;
        bool fini = false;
		for (pStr = (TCHAR *)fileNameStr ; !fini ; )
		{
			if (i >= filePathLength)
				break;

			switch (*pStr)
			{
				case '"' :
					if (isInsideQuotes)
					{
						str[i] = '\0';
                        if (str[0])
							_fileNames.push_back(generic_string(str));
						i = 0;
					}
					isInsideQuotes = !isInsideQuotes;
					pStr++;
					break;
				
				case ' ' :
					if (isInsideQuotes)
					{
						str[i] = *pStr;
						i++; 
					}
					else
					{
						str[i] = '\0';
                        if (str[0])
							_fileNames.push_back(generic_string(str));
						i = 0;
					}
                    pStr++;
					break;
					
                case '\0' :
                    str[i] = *pStr;
                    if (str[0])
						_fileNames.push_back(generic_string(str));
                    fini = true;
					break;

				default :
					str[i] = *pStr;
					i++; pStr++;
					break;
			}
		}
	};

FileNameStringSplitter::getFileName(int index) const  {		return _fileNames[index].c_str();
	};

int FileNameStringSplitter::size() const  {		return int(_fileNames.size());
	};

FileNameStringSplitter::FileNameStringSplitter(const TCHAR *fileNameStr)   {		//if (!fileNameStr) return;
		TCHAR *pStr = NULL;
		bool isInsideQuotes = false;
		const int filePathLength = MAX_PATH;

		TCHAR str[filePathLength];
		int i = 0;
        bool fini = false;
		for (pStr = (TCHAR *)fileNameStr ; !fini ; )
		{
			if (i >= filePathLength)
				break;

			switch (*pStr)
			{
				case '"' :
					if (isInsideQuotes)
					{
						str[i] = '\0';
                        if (str[0])
							_fileNames.push_back(generic_string(str));
						i = 0;
					}
					isInsideQuotes = !isInsideQuotes;
					pStr++;
					break;
				
				case ' ' :
					if (isInsideQuotes)
					{
						str[i] = *pStr;
						i++; 
					}
					else
					{
						str[i] = '\0';
                        if (str[0])
							_fileNames.push_back(generic_string(str));
						i = 0;
					}
                    pStr++;
					break;
					
                case '\0' :
                    str[i] = *pStr;
                    if (str[0])
						_fileNames.push_back(generic_string(str));
                    fini = true;
					break;

				default :
					str[i] = *pStr;
					i++; pStr++;
					break;
			}
		}
	};

FileNameStringSplitter::getFileName(int index) const  {		return _fileNames[index].c_str();
	};

int FileNameStringSplitter::size() const  {		return int(_fileNames.size());
	};

FileNameStringSplitter::FileNameStringSplitter(const TCHAR *fileNameStr)   {		//if (!fileNameStr) return;
		TCHAR *pStr = NULL;
		bool isInsideQuotes = false;
		const int filePathLength = MAX_PATH;

		TCHAR str[filePathLength];
		int i = 0;
        bool fini = false;
		for (pStr = (TCHAR *)fileNameStr ; !fini ; )
		{
			if (i >= filePathLength)
				break;

			switch (*pStr)
			{
				case '"' :
					if (isInsideQuotes)
					{
						str[i] = '\0';
                        if (str[0])
							_fileNames.push_back(generic_string(str));
						i = 0;
					}
					isInsideQuotes = !isInsideQuotes;
					pStr++;
					break;
				
				case ' ' :
					if (isInsideQuotes)
					{
						str[i] = *pStr;
						i++; 
					}
					else
					{
						str[i] = '\0';
                        if (str[0])
							_fileNames.push_back(generic_string(str));
						i = 0;
					}
                    pStr++;
					break;
					
                case '\0' :
                    str[i] = *pStr;
                    if (str[0])
						_fileNames.push_back(generic_string(str));
                    fini = true;
					break;

				default :
					str[i] = *pStr;
					i++; pStr++;
					break;
			}
		}
	};

FileNameStringSplitter::getFileName(int index) const  {		return _fileNames[index].c_str();
	};

int FileNameStringSplitter::size() const  {		return int(_fileNames.size());
	};

FileNameStringSplitter::FileNameStringSplitter(const TCHAR *fileNameStr)   {		//if (!fileNameStr) return;
		TCHAR *pStr = NULL;
		bool isInsideQuotes = false;
		const int filePathLength = MAX_PATH;

		TCHAR str[filePathLength];
		int i = 0;
        bool fini = false;
		for (pStr = (TCHAR *)fileNameStr ; !fini ; )
		{
			if (i >= filePathLength)
				break;

			switch (*pStr)
			{
				case '"' :
					if (isInsideQuotes)
					{
						str[i] = '\0';
                        if (str[0])
							_fileNames.push_back(generic_string(str));
						i = 0;
					}
					isInsideQuotes = !isInsideQuotes;
					pStr++;
					break;
				
				case ' ' :
					if (isInsideQuotes)
					{
						str[i] = *pStr;
						i++; 
					}
					else
					{
						str[i] = '\0';
                        if (str[0])
							_fileNames.push_back(generic_string(str));
						i = 0;
					}
                    pStr++;
					break;
					
                case '\0' :
                    str[i] = *pStr;
                    if (str[0])
						_fileNames.push_back(generic_string(str));
                    fini = true;
					break;

				default :
					str[i] = *pStr;
					i++; pStr++;
					break;
			}
		}
	};

FileNameStringSplitter::getFileName(int index) const  {		return _fileNames[index].c_str();
	};

int FileNameStringSplitter::size() const  {		return int(_fileNames.size());
	};

intFileNameStringSplitter::size() const  {		return int(_fileNames.size());
	};

intFileNameStringSplitter::size() const  {
		return int(_fileNames.size());
	};

