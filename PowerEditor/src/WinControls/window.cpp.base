Window::Window(): _hInst(NULL), _hParent(NULL), _hSelf(NULL) {};
virtual Window::~Window()  {};
void Window::display(bool toShow = true) const  {
		::ShowWindow(_hSelf, toShow?SW_SHOW:SW_HIDE);
	};

void Window::redraw(bool forceUpdate = false) const  {
		::InvalidateRect(_hSelf, NULL, TRUE);
		if (forceUpdate)
			::UpdateWindow(_hSelf);
	};

void Window::getClientRect(RECT & rc) const  {
		::GetClientRect(_hSelf, &rc);
	};

void Window::getWindowRect(RECT & rc) const  {
		::GetWindowRect(_hSelf, &rc);
	};

int Window::getWidth() const  {
		RECT rc;
		::GetClientRect(_hSelf, &rc);
		return (rc.right - rc.left);
	};

int Window::getHeight() const  {
		RECT rc;
		::GetClientRect(_hSelf, &rc);
		if (::IsWindowVisible(_hSelf) == TRUE)
			return (rc.bottom - rc.top);
		return 0;
	};

bool Window::isVisible() const  {
    	return (::IsWindowVisible(_hSelf)?true:false);
	};

HWND Window::getHSelf() const  {
		//assert(_hSelf != 0);
		return _hSelf;
	};

HWND Window::getHParent() const  {
		return _hParent;
	};

void Window::getFocus() const  {
		::SetFocus(_hSelf);
	};

HINSTANCE Window::getHinst() const  {
		//assert(_hInst != 0);
		return _hInst;
	};

Window::Window(): _hInst(NULL), _hParent(NULL), _hSelf(NULL) {};
virtual Window::~Window()  {};
void Window::display(bool toShow = true) const  {		::ShowWindow(_hSelf, toShow?SW_SHOW:SW_HIDE);
	};

void Window::redraw(bool forceUpdate = false) const  {		::InvalidateRect(_hSelf, NULL, TRUE);
		if (forceUpdate)
			::UpdateWindow(_hSelf);
	};

void Window::getClientRect(RECT & rc) const  {		::GetClientRect(_hSelf, &rc);
	};

void Window::getWindowRect(RECT & rc) const  {		::GetWindowRect(_hSelf, &rc);
	};

int Window::getWidth() const  {		RECT rc;
		::GetClientRect(_hSelf, &rc);
		return (rc.right - rc.left);
	};

int Window::getHeight() const  {		RECT rc;
		::GetClientRect(_hSelf, &rc);
		if (::IsWindowVisible(_hSelf) == TRUE)
			return (rc.bottom - rc.top);
		return 0;
	};

bool Window::isVisible() const  {    	return (::IsWindowVisible(_hSelf)?true:false);
	};

HWND Window::getHSelf() const  {		//assert(_hSelf != 0);
		return _hSelf;
	};

HWND Window::getHParent() const  {		return _hParent;
	};

void Window::getFocus() const  {		::SetFocus(_hSelf);
	};

HINSTANCE Window::getHinst() const  {		//assert(_hInst != 0);
		return _hInst;
	};

Window::Window(): _hInst(NULL), _hParent(NULL), _hSelf(NULL) {};
virtual Window::~Window()  {};
void Window::display(bool toShow = true) const  {		::ShowWindow(_hSelf, toShow?SW_SHOW:SW_HIDE);
	};

void Window::redraw(bool forceUpdate = false) const  {		::InvalidateRect(_hSelf, NULL, TRUE);
		if (forceUpdate)
			::UpdateWindow(_hSelf);
	};

void Window::getClientRect(RECT & rc) const  {		::GetClientRect(_hSelf, &rc);
	};

void Window::getWindowRect(RECT & rc) const  {		::GetWindowRect(_hSelf, &rc);
	};

int Window::getWidth() const  {		RECT rc;
		::GetClientRect(_hSelf, &rc);
		return (rc.right - rc.left);
	};

int Window::getHeight() const  {		RECT rc;
		::GetClientRect(_hSelf, &rc);
		if (::IsWindowVisible(_hSelf) == TRUE)
			return (rc.bottom - rc.top);
		return 0;
	};

bool Window::isVisible() const  {    	return (::IsWindowVisible(_hSelf)?true:false);
	};

HWND Window::getHSelf() const  {		//assert(_hSelf != 0);
		return _hSelf;
	};

HWND Window::getHParent() const  {		return _hParent;
	};

void Window::getFocus() const  {		::SetFocus(_hSelf);
	};

HINSTANCE Window::getHinst() const  {		//assert(_hInst != 0);
		return _hInst;
	};

Window::Window(): _hInst(NULL), _hParent(NULL), _hSelf(NULL) {};
virtual Window::~Window()  {};
void Window::display(bool toShow = true) const  {		::ShowWindow(_hSelf, toShow?SW_SHOW:SW_HIDE);
	};

void Window::redraw(bool forceUpdate = false) const  {		::InvalidateRect(_hSelf, NULL, TRUE);
		if (forceUpdate)
			::UpdateWindow(_hSelf);
	};

void Window::getClientRect(RECT & rc) const  {		::GetClientRect(_hSelf, &rc);
	};

void Window::getWindowRect(RECT & rc) const  {		::GetWindowRect(_hSelf, &rc);
	};

int Window::getWidth() const  {		RECT rc;
		::GetClientRect(_hSelf, &rc);
		return (rc.right - rc.left);
	};

int Window::getHeight() const  {		RECT rc;
		::GetClientRect(_hSelf, &rc);
		if (::IsWindowVisible(_hSelf) == TRUE)
			return (rc.bottom - rc.top);
		return 0;
	};

bool Window::isVisible() const  {    	return (::IsWindowVisible(_hSelf)?true:false);
	};

HWND Window::getHSelf() const  {		//assert(_hSelf != 0);
		return _hSelf;
	};

HWND Window::getHParent() const  {		return _hParent;
	};

void Window::getFocus() const  {		::SetFocus(_hSelf);
	};

HINSTANCE Window::getHinst() const  {		//assert(_hInst != 0);
		return _hInst;
	};

Window::Window(): _hInst(NULL), _hParent(NULL), _hSelf(NULL) {};
virtual Window::~Window()  {};
void Window::display(bool toShow = true) const  {		::ShowWindow(_hSelf, toShow?SW_SHOW:SW_HIDE);
	};

void Window::redraw(bool forceUpdate = false) const  {		::InvalidateRect(_hSelf, NULL, TRUE);
		if (forceUpdate)
			::UpdateWindow(_hSelf);
	};

void Window::getClientRect(RECT & rc) const  {		::GetClientRect(_hSelf, &rc);
	};

void Window::getWindowRect(RECT & rc) const  {		::GetWindowRect(_hSelf, &rc);
	};

int Window::getWidth() const  {		RECT rc;
		::GetClientRect(_hSelf, &rc);
		return (rc.right - rc.left);
	};

int Window::getHeight() const  {		RECT rc;
		::GetClientRect(_hSelf, &rc);
		if (::IsWindowVisible(_hSelf) == TRUE)
			return (rc.bottom - rc.top);
		return 0;
	};

bool Window::isVisible() const  {    	return (::IsWindowVisible(_hSelf)?true:false);
	};

HWND Window::getHSelf() const  {		//assert(_hSelf != 0);
		return _hSelf;
	};

HWND Window::getHParent() const  {		return _hParent;
	};

void Window::getFocus() const  {		::SetFocus(_hSelf);
	};

HINSTANCE Window::getHinst() const  {		//assert(_hInst != 0);
		return _hInst;
	};

Window::Window(): _hInst(NULL), _hParent(NULL), _hSelf(NULL) {};
virtual Window::~Window()  {};
void Window::display(bool toShow = true) const  {		::ShowWindow(_hSelf, toShow?SW_SHOW:SW_HIDE);
	};

void Window::redraw(bool forceUpdate = false) const  {		::InvalidateRect(_hSelf, NULL, TRUE);
		if (forceUpdate)
			::UpdateWindow(_hSelf);
	};

void Window::getClientRect(RECT & rc) const  {		::GetClientRect(_hSelf, &rc);
	};

void Window::getWindowRect(RECT & rc) const  {		::GetWindowRect(_hSelf, &rc);
	};

int Window::getWidth() const  {		RECT rc;
		::GetClientRect(_hSelf, &rc);
		return (rc.right - rc.left);
	};

int Window::getHeight() const  {		RECT rc;
		::GetClientRect(_hSelf, &rc);
		if (::IsWindowVisible(_hSelf) == TRUE)
			return (rc.bottom - rc.top);
		return 0;
	};

bool Window::isVisible() const  {    	return (::IsWindowVisible(_hSelf)?true:false);
	};

HWND Window::getHSelf() const  {		//assert(_hSelf != 0);
		return _hSelf;
	};

HWND Window::getHParent() const  {		return _hParent;
	};

void Window::getFocus() const  {		::SetFocus(_hSelf);
	};

HINSTANCE Window::getHinst() const  {		//assert(_hInst != 0);
		return _hInst;
	};

virtualWindow::~Window()  {};
voidWindow::display(bool toShow = true) const  {		::ShowWindow(_hSelf, toShow?SW_SHOW:SW_HIDE);
	};

voidWindow::redraw(bool forceUpdate = false) const  {		::InvalidateRect(_hSelf, NULL, TRUE);
		if (forceUpdate)
			::UpdateWindow(_hSelf);
	};

voidWindow::getClientRect(RECT & rc) const  {		::GetClientRect(_hSelf, &rc);
	};

voidWindow::getWindowRect(RECT & rc) const  {		::GetWindowRect(_hSelf, &rc);
	};

intWindow::getWidth() const  {		RECT rc;
		::GetClientRect(_hSelf, &rc);
		return (rc.right - rc.left);
	};

intWindow::getHeight() const  {		RECT rc;
		::GetClientRect(_hSelf, &rc);
		if (::IsWindowVisible(_hSelf) == TRUE)
			return (rc.bottom - rc.top);
		return 0;
	};

boolWindow::isVisible() const  {    	return (::IsWindowVisible(_hSelf)?true:false);
	};

HWNDWindow::getHSelf() const  {		//assert(_hSelf != 0);
		return _hSelf;
	};

HWNDWindow::getHParent() const  {		return _hParent;
	};

voidWindow::getFocus() const  {		::SetFocus(_hSelf);
	};

HINSTANCEWindow::getHinst() const  {		//assert(_hInst != 0);
		return _hInst;
	};

virtualWindow::~Window()  {};
voidWindow::display(bool toShow = true) const  {
		::ShowWindow(_hSelf, toShow?SW_SHOW:SW_HIDE);
	};

voidWindow::redraw(bool forceUpdate = false) const  {
		::InvalidateRect(_hSelf, NULL, TRUE);
		if (forceUpdate)
			::UpdateWindow(_hSelf);
	};

voidWindow::getClientRect(RECT & rc) const  {
		::GetClientRect(_hSelf, &rc);
	};

voidWindow::getWindowRect(RECT & rc) const  {
		::GetWindowRect(_hSelf, &rc);
	};

intWindow::getWidth() const  {
		RECT rc;
		::GetClientRect(_hSelf, &rc);
		return (rc.right - rc.left);
	};

intWindow::getHeight() const  {
		RECT rc;
		::GetClientRect(_hSelf, &rc);
		if (::IsWindowVisible(_hSelf) == TRUE)
			return (rc.bottom - rc.top);
		return 0;
	};

boolWindow::isVisible() const  {
    	return (::IsWindowVisible(_hSelf)?true:false);
	};

HWNDWindow::getHSelf() const  {
		//assert(_hSelf != 0);
		return _hSelf;
	};

HWNDWindow::getHParent() const  {
		return _hParent;
	};

voidWindow::getFocus() const  {
		::SetFocus(_hSelf);
	};

HINSTANCEWindow::getHinst() const  {
		//assert(_hInst != 0);
		return _hInst;
	};

